image: openjdk:11-jdk

variables:

  # ANDROID_COMPILE_SDK is the version of Android you're compiling with.
  # It should match compileSdkVersion.
  ANDROID_COMPILE_SDK: "33"
  PROXY_HOST_IAV: "10.240.44.30"
  PROXY_PORT_IAV: "3128"

  # ANDROID_BUILD_TOOLS is the version of the Android build tools you are using.
  # It should match buildToolsVersion.
  ANDROID_BUILD_TOOLS: "29.0.3"

  # It's what version of the command line tools we're going to download from the official site.
  # Official Site-> https://developer.android.com/studio/index.html
  # There, look down below at the cli tools only, sdk tools package is of format:
  #        commandlinetools-os_type-ANDROID_SDK_TOOLS_latest.zip
  # when the script was last modified for latest compileSdkVersion, it was which is written down below
  ANDROID_SDK_TOOLS: "6514223"

# Packages installation before running script
before_script:
  - apt-get --quiet update --yes
  - apt-get --quiet install --yes wget tar unzip lib32stdc++6 lib32z1

  # Setup path as android_home for moving/exporting the downloaded sdk into it
  - export ANDROID_HOME="${PWD}/android-home"
  # Create a new directory at specified location
  - install -d $ANDROID_HOME
  # Here we are installing androidSDK tools from official source,
  # (the key thing here is the url from where you are downloading these sdk tool for command line, so please do note this url pattern there and here as well)
  # after that unzipping those tools and
  # then running a series of SDK manager commands to install necessary android SDK packages that'll allow the app to build
  - wget --output-document=$ANDROID_HOME/cmdline-tools.zip https://dl.google.com/android/repository/commandlinetools-linux-${ANDROID_SDK_TOOLS}_latest.zip
  # move to the archive at ANDROID_HOME
  - pushd $ANDROID_HOME
  - unzip -d cmdline-tools cmdline-tools.zip
  - popd
  - export PATH=$PATH:${ANDROID_HOME}/cmdline-tools/tools/bin/


  # Nothing fancy here, just checking sdkManager version
  - sdkmanager --version

  # use yes to accept all licenses
  - yes | sdkmanager --sdk_root=${ANDROID_HOME} --licenses || true
  - sdkmanager --sdk_root=${ANDROID_HOME} "platforms;android-${ANDROID_COMPILE_SDK}"
  - sdkmanager --sdk_root=${ANDROID_HOME} "platform-tools"
  - sdkmanager --sdk_root=${ANDROID_HOME} "build-tools;${ANDROID_BUILD_TOOLS}"

  - chmod +x ./gradlew

stages:
  - test
  - build
  - deploy

assebleDebug:
  interruptible: true
  stage: build
  rules:
  script:
    - echo "assemble and package app"
    - ./gradlew -Dhttps.proxyHost=$PROXY_HOST_IAV -Dhttps.proxyPort=$PROXY_PORT_IAV "-Dhttp.nonProxyHosts=*.nonproxyrepos.com|localhost" :app:assemble
    - ls
    - cp app/build/outputs/apk/debug/app-debug.apk ./
  artifacts:
    expire_in: never
    paths:
      - app-debug.apk

assembleRelease:
  stage: build
  interruptible: true
  script:
    - echo $KEYSTORE_FILE | base64 -d > my.keystore
    - ./gradlew -Dhttps.proxyHost=$PROXY_HOST_IAV -Dhttps.proxyPort=$PROXY_PORT_IAV "-Dhttp.nonProxyHosts=*.nonproxyrepos.com|localhost" :app:assemble
      -Pandroid.injected.signing.store.file=$(pwd)/my.keystore
      -Pandroid.injected.signing.store.password=$KEYSTORE_PASSWORD
      -Pandroid.injected.signing.key.alias=$KEY_ALIAS
      -Pandroid.injected.signing.key.password=$KEY_PASSWORD
    - cp app/build/outputs/apk/release/app-release.apk ./

  artifacts:
    expire_in: never
    paths:
      - app-release.apk

CreateAssets:
  stage: deploy
  rules:
    - if: $CI_COMMIT_TAG
  image: registry.gitlab.com/gitlab-org/release-cli:latest
  before_script: []
  script:
    - echo "Create GitLab Release item v.$CI_COMMIT_TAG"
  release:
    name: 'Release $CI_COMMIT_TAG'
    description: 'v.$CI_COMMIT_TAG Release Notes: $CI_COMMIT_MESSAGE'
    tag_name: '$CI_COMMIT_TAG'
    ref: '$CI_COMMIT_TAG'
    assets:
      links:
        - name: 'debug apk'
          url: 'https://gitlab.iav.com/StudentenProjekte-extern/android/-/jobs/artifacts/$CI_COMMIT_REF_NAME/download?job=assebleDebug'
        - name: 'signed release apk'
          url: 'https://gitlab.iav.com/StudentenProjekte-extern/android/-/jobs/artifacts/$CI_COMMIT_REF_NAME/download?job=assembleRelease'

# Basic android and gradle stuff
# Check linting
#lintDebug:
#  interruptible: true
#  stage: build
#  script:
#    - ./gradlew -Dhttps.proxyHost=$PROXY_HOST_IAV -Dhttps.proxyPort=$PROXY_PORT_IAV "-Dhttp.nonProxyHosts=*.nonproxyrepos.com|localhost" -Pci --console=plain :app:lintDebug -PbuildDir=lint
# Make Project

#assembleDebug:
#  interruptible: true
#  stage: build
#  rules:
#    - if: $CI_COMMIT_TAG
#  script:
#    - ./gradlew -Dhttps.proxyHost=$PROXY_HOST_IAV -Dhttps.proxyPort=$PROXY_PORT_IAV "-Dhttp.nonProxyHosts=*.nonproxyrepos.com|localhost" assembleDebug
#  artifacts:
#    paths:
#      - app/build/outputs/



# Run all tests, if any fails, interrupt the pipeline(fail it)
debugTests:
  interruptible: true
  stage: test
  script:
    - ./gradlew -Dhttps.proxyHost=$PROXY_HOST_IAV -Dhttps.proxyPort=$PROXY_PORT_IAV "-Dhttp.nonProxyHosts=*.nonproxyrepos.com|localhost" -Pci --console=plain :app:testDebug
